



Network Working Group                                         E. Kinnear
Internet-Draft                                                  T. Pauly
Intended status: Standards Track                                 C. Wood
Expires: March 12, 2020                                       Apple Inc.
                                                              P. McManus
                                                                  Fastly
                                                      September 09, 2019


                       Obfuscated DNS Over HTTPS
                   draft-pauly-obfuscated-doh-latest

Abstract

   This document describes an extension to DNS Over HTTPS (DoH) that
   allows obfuscation of client addresses via proxying encrypted DNS
   transactions.  This improves privacy of DNS operations by not
   allowing any one server entity to be aware of both the client IP
   address and the content of DNS queries and answers.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 12, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



Kinnear, et al.          Expires March 12, 2020                 [Page 1]

Internet-Draft               Obfuscated DoH               September 2019


   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Specification of Requirements . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Deployment Requirements . . . . . . . . . . . . . . . . . . .   3
   4.  HTTP Exchange . . . . . . . . . . . . . . . . . . . . . . . .   4
     4.1.  HTTP Request  . . . . . . . . . . . . . . . . . . . . . .   4
     4.2.  HTTP Request Example  . . . . . . . . . . . . . . . . . .   5
     4.3.  HTTP Response . . . . . . . . . . . . . . . . . . . . . .   5
     4.4.  HTTP Response Example . . . . . . . . . . . . . . . . . .   5
   5.  Public Key Discovery  . . . . . . . . . . . . . . . . . . . .   6
   6.  Obfuscated DNS Public Key Format  . . . . . . . . . . . . . .   6
   7.  Obfuscated DNS Message Format . . . . . . . . . . . . . . . .   6
     7.1.  Obfuscated Queries  . . . . . . . . . . . . . . . . . . .   7
     7.2.  Obfuscated Responses  . . . . . . . . . . . . . . . . . .   8
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .   9
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9
     9.1.  Obfuscated DoH Message Media Type . . . . . . . . . . . .   9
     9.2.  Obfuscated DoH Public Key DNS Parameter . . . . . . . . .  10
   10. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  10
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  10
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  10
     11.2.  Informative References . . . . . . . . . . . . . . . . .  11
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  11

1.  Introduction

   DNS Over HTTPS (DoH) [RFC8484] defines a mechanism to allow DNS
   messages to be transmitted in encrypted HTTP messages.  This provides
   improved confidentiality and authentication for DNS interactions in
   various circumstances.

   While DoH can prevent eavesdroppers from directly reading the
   contents of DNS exchanges, it does not allow clients to send DNS
   queries and receive answers from servers without revealing their
   local IP address, and thus information about the identity or location
   of the client.

   Proposals such as Oblivious DNS ([I-D.annee-dprive-oblivious-dns])
   allow increased privacy by not allowing any single DNS server to be
   aware of both the client IP address and the message contents.





Kinnear, et al.          Expires March 12, 2020                 [Page 2]

Internet-Draft               Obfuscated DoH               September 2019


   This document defines Obfuscated DoH, an extension to DoH that allows
   for a proxied mode of resolution, in which DNS messages are encrypted
   in such a way that no DoH server can independently read both the
   client IP address and the DNS message contents.

   This mechanism is intended to be used as one option for resolving
   privacy-sensitive content in the broader context of Adaptive DNS
   [ADNS].

1.1.  Specification of Requirements

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Terminology

   This document defines the following terms:

   Obfuscation Proxy:  A resolution server that proxies encrypted client
      DNS queries to another resolution server that will be able to
      decrypt the query (the Obfuscation Target).

   Obfuscation Target:  A resolution server that receives encrypted
      client DNS queries and generates encrypted DNS responses
      transferred via an Obfuscation Proxy.

3.  Deployment Requirements

   Obfuscated DoH requires, at a minimum:

   o  Two DoH servers, where one can act as an Obfuscation Proxy, and
      the other can act as an Obfuscation Target.

   o  Public keys for encrypting DNS queries that are passed from a
      client through a proxy to a target (Section 6).

   o  Client ability to generate one-time-use symmetric keys to encrypt
      DNS responses.

   The mechanism for discovering and provisioning the DoH URI Templates
   and public keys is via parameters added to DNS resource records.  The
   mechanism for discovering the public key is decribed in Section 5.
   The mechanism for discovering a DoH URI Template is described in
   [ADNS].




Kinnear, et al.          Expires March 12, 2020                 [Page 3]

Internet-Draft               Obfuscated DoH               September 2019


4.  HTTP Exchange

   Unlike direct resolution, obfuscated hostname resolution over DoH
   involves three parties:

   1.  The Client, which generates queries.

   2.  The Obfuscation Proxy, which is a resolution server that receives
       encrypted queries from the client and passes them on to another
       resolution server.

   3.  The Obfuscation Target, which is a resolution server that
       receives proxied queries from the client via the Obfuscation
       Proxy.

4.1.  HTTP Request

   Obfuscated DoH queries are created by the Client, and sent to the
   Obfuscation Proxy.  The proxy's address is determined from the
   authority of the proxy server's URI, while the authority information
   of the HTTP request reflects the authority of the target server.
   Likewise, when connecting to the proxy the client should use the
   proxy target's information for HTTPS certificate selection via SNI
   and when validating the resulting certificate.

   Obfuscated DoH messages have no cache value since both requests and
   responses are encrypted using ephemeral key material.  proxies to
   satisfy future requests due to the nature of their encrypted message
   bodies.  Clients SHOULD use HTTP and DoH methods and headers that
   will prevent unhelpful cache storage of these exchanges.

   Clients MUST set the HTTP Content-Type header to "application/
   obfuscated-dns-message" to indicate that this request is an
   obfuscated query intended for proxying.  Clients also SHOULD set this
   same value for the HTTP Accept header.

   The HTTP authority information (e.g.  The HTTP/2 :authority psuedo-
   header or the HTTP/1 host header) MUST indicate the hostname of the
   Obfuscation Target (not the Obfuscation Proxy that initially receives
   the request), and the path information MUST conform to the path
   specified by the Obfuscation Target's DoH URI Template.

   Upon receiving a request that contains a "application/obfuscated-dns-
   message" Content-Type, the DoH server looks at the :authority and
   :path psuedo-headers.  If the fields match the DoH server's own
   hostname and configured path, then it is the target of the query, and
   can decrypt the query Section 7.  If the fields do not match the
   local server, then the server is acting as an Obfuscation Proxy.  If



Kinnear, et al.          Expires March 12, 2020                 [Page 4]

Internet-Draft               Obfuscated DoH               September 2019


   it is a proxy, it is expected to send the request on to the
   Obfuscation Target based on the authority identified in the HTTP
   request.

4.2.  HTTP Request Example

   The following example shows how a client requests that an Obfuscation
   Proxy, "dnsproxy.example.net", forwards an encrypted message to
   "dnstarget.example.net".

   :method = POST
   :scheme = https
   :authority = dnstarget.example.net
   :path = /dns-query
   accept = application/obfuscated-dns-message
   cache-control = no-cache, no-store
   content-type = application/obfuscated-dns-message
   content-length = 106

   <Bytes containing the encrypted payload for an Obfuscated DNS query>

   The Obfuscation Proxy then sends the exact same request on to the
   Obfuscation Target, without modification.

4.3.  HTTP Response

   The response to an obfuscated query is generated by the Obfuscation
   Target.  It MUST set the Content-Type HTTP header to "application/
   obfuscated-dns-message" for all successful responses.  The body of
   the response contains a DNS message that is encrypted with the
   client's symmetric key Section 7.

   All other aspects of the HTTP response and error handling are
   inherited from standard DoH.

4.4.  HTTP Response Example

   The following example shows a response that can be sent from an
   Obfuscation Target to a client via an Obfuscation Proxy.

 :status = 200
 content-type = application/obfuscated-dns-message
 content-length = 154

 <Bytes containing the encrypted payload for an Obfuscated DNS response>






Kinnear, et al.          Expires March 12, 2020                 [Page 5]

Internet-Draft               Obfuscated DoH               September 2019


5.  Public Key Discovery

   In order to use a DoH server as an Obfuscation Target, the client
   must know a public key to use for encrypting its queries.  This key
   can be discovered using the SVCB or HTTPSSVC record type
   ([I-D.nygren-httpbis-httpssvc]) for a name owned by the server.

   The key name is "odohkey", and has an encoded SvcParamKey value of 5.
   If present, this key/value pair contains the public key to use when
   encrypting obfuscated messages that will be targeted at a DoH server.
   The format of the key is defined in Section 6.

   Clients MUST only use keys that were retrieved from records protected
   by DNSSEC [RFC4033] to encrypt messages to an Obfuscation Target.

6.  Obfuscated DNS Public Key Format

   An Obfuscated DNS public key is a structure encoded, using [RFC8446]-
   style encoding, as follows:

   struct {
      uint16 kem_id;
      uint16 kdf_id;
      uint16 aead_id;
      opaque public_key<1..2^16-1>;
   } ObfuscatedDNSKey;

   It contains the information needed to encrypt a message under
   ObfuscatedDNSKey.public_key such that only the owner of the
   corresponding private key can decrypt the message.  The values for
   ObfuscatedDNSKey.kem_id, ObfuscatedDNSKey.kdf_id, and
   ObfuscatedDNSKey.aead_id are described in [I-D.irtf-cfrg-hpke],
   Section 7.  For convenience, let Identifier(ObfuscatedDNSKey) be
   defined as the SHA256 value of ObfuscatedDNSKey serialized.

7.  Obfuscated DNS Message Format

   There are two types of Obfuscated DNS messages: Queries (0x01) and
   Responses (0x02).  Both are encoded as follows:

   struct {
      uint16 message_length;
      uint8  message_type;
      uint64 query_id;
      opaque key_id<0..2^16-1>;
      opaque encrypted_message<1..2^16-1>;
   } ObfuscatedDNSMessage;




Kinnear, et al.          Expires March 12, 2020                 [Page 6]

Internet-Draft               Obfuscated DoH               September 2019


   ObfuscatedDNSMessage.message_type = 0x01 for Query messages and
   ObfuscatedDNSMessage.message_type = 0x02 for Response messages.
   ObfuscatedDNSMessage.encrypted_message contains an encrypted message
   for the Obfuscation Target (for Query messages) or client (for
   Response messages).  The following sections describe how these
   meessage bodies are constructed.

7.1.  Obfuscated Queries

   Obfuscated DNS Query messages must carry the following information:

   1.  A symmetric key and ciphersuite under which the DNS response will
       be encrypted.

   2.  A DNS query message which the client wishes to resolve.

   And is encoded as follows:

   struct {
      opaque symmetric_key<1..2^16-1>;
      opaque dns_message<1..2^16-1>;
   } ObfuscatedDNSQueryBody;

   Let M be a DNS message a client wishes to send obfuscated.  When
   sending an Obfuscated DNS Query for resolving M to an Obfuscation
   Target with ObfuscatedDNSKey key pk, a client does the following:

   1.  Generate a random 64-bit query_id and random symmetric_key whose
       length matches that of the AEAD ciphersuite in pk.aead_id.  (All
       randomness must be generated according to [RFC4086].)

   2.  Create a ObfuscatedDNSQueryBody structure, carrying symmetric_key
       and the message M, to produce pt.

   3.  Unmarshal pk.public_key to produce a public key pkR of type
       pk.kem_id.

   4.  Compute the encrypted message blob as blob =
       encrypt_query_body(pkR, query_id, pt).  HPKE KEM, KDF, and AEAD
       parameters for encrypt_query_body are instantiated from pk.  (See
       definition for encrypt_query_body below.)

   5.  Output a ObfuscatedDNSMessage message Q where Q.message_type =
       0x01, M.query_id = query_id, and M.encrypted_message = blob,
       M.key_id carries Identifier(pk), and M.message_length equals the
       length of the entire structure.





Kinnear, et al.          Expires March 12, 2020                 [Page 7]

Internet-Draft               Obfuscated DoH               September 2019


   The client then sends Q to the Obfuscated Proxy according to
   Section 4.1.

   def encrypt_query_body(pkR, query_id, pt):
     enc, context = SetupBaseI(pkR, "odns-query")
     aad = 0x01 || query_id
     ct = context.Seal(aad, pt)
     blob = enc || ct
     return blob

7.2.  Obfuscated Responses

   Obfuscated DNS Response messages carry the DNS response.  Its
   encoding is as follows:

   struct {
      opaque dns_answer<1..2^16-1>;
   } ObfuscatedDNSResponseBody;

   Targets that receive a Query message Q decrypt and process it as
   follows:

   1.  Look up the ObfuscatedDNSKey according to Q.key_id.  If no such
       key exists, the Target MAY discard the query.  Otherwise, let skR
       be the private key corresponding to this public key, or one
       chosen for trial decryption, and pk be the corresponding
       ObfuscatedDNSKey.

   2.  Compute pt, error = decrypt_query_body(Q.encrypted_message).
       HPKE KEM, KDF, and AEAD parameters for encrypt_query_body are
       instantiated from pk.  (See definition for decrypt_query_body
       below.)

   3.  If no error was returned, process pt as a ObfuscatedDNSQueryBody
       Qb.

   4.  Resolve ObfuscatedDNSQueryBody.dns_message as needed, yielding
       answer Rb.

   5.  Compute R_encrypted = encrypt_response_body(Q.query_id, Rb).
       (See definition for encrypt_response_body below.)

   6.  Output a ObfuscatedDNSMessage message R where R.message_type =
       0x02, R.query_id = Q.query_id, and R.encrypted_message =
       R_encrypted, R.key_id = nil, and R.message_length equals the
       length of the entire structure.





Kinnear, et al.          Expires March 12, 2020                 [Page 8]

Internet-Draft               Obfuscated DoH               September 2019


   def decrypt_query_body(encrypted_message):
     enc || ct = Q.encrypted_message
     dec, context = SetupBaseR(skR, "odns-query")
     aad = 0x01 || Q.query_id
     pt, error = context.Open(aad, ct)
     return pt, error

   def encrypt_response_body(query_id, response):
     aad = 0x02 || ObfuscatedDNSMessage.query_id
     R_encrypted = Seal(Q.symmetic_key, 0^Nn, aad, Rb)
     return R_encrypted

   The Target then sends R to the Proxy according to Section 4.3.

8.  Security Considerations

9.  IANA Considerations

9.1.  Obfuscated DoH Message Media Type

   This document registers a new media type, "application/obfuscated-
   dns-message".

   Type name: application

   Subtype name: obfuscated-dns-message

   Required parameters: N/A

   Optional parameters: N/A

   Encoding considerations: This is a binary format, containing
   encrypted DNS requests and responses, as defined in this document.

   Security considerations: See this document.  The content is an
   encrypted DNS message, and not executable code.

   Interoperability considerations: This document specifies format of
   conforming messages and the interpretation thereof.

   Published specification: This document.

   Applications that use this media type: This media type is intended to
   be used by clients wishing to obfuscate their DNS queries when using
   DNS over HTTPS.

   Additional information: None




Kinnear, et al.          Expires March 12, 2020                 [Page 9]

Internet-Draft               Obfuscated DoH               September 2019


   Person and email address to contact for further information: See
   Authors' Addresses section

   Intended usage: COMMON

   Restrictions on usage: None

   Author: IETF

   Change controller: IETF

9.2.  Obfuscated DoH Public Key DNS Parameter

   This document defines one new key to be added to the Service Binding
   (SVCB) Parameter Registry, as defined in
   [I-D.nygren-httpbis-httpssvc].

   Name:  odohkey

   SvcParamKey:  5

   Meaning:  Public key used to encrypt messages in Obfuscated DoH

   Reference:  This document.

10.  Acknowledgments

   This work is inspired by Oblivious DNS
   [I-D.annee-dprive-oblivious-dns].  Thanks to all of the authors of
   that document.  Thanks to Frederic Jacobs for feedback on this
   document.

11.  References

11.1.  Normative References

   [ADNS]     "Adaptive DNS: Improving Privacy of Name Resolution",
              n.d..

   [I-D.irtf-cfrg-hpke]
              Barnes, R. and K. Bhargavan, "Hybrid Public Key
              Encryption", draft-irtf-cfrg-hpke-00 (work in progress),
              July 2019.








Kinnear, et al.          Expires March 12, 2020                [Page 10]

Internet-Draft               Obfuscated DoH               September 2019


   [I-D.nygren-httpbis-httpssvc]
              Schwartz, B., Bishop, M., and E. Nygren, "HTTPSSVC service
              location and parameter specification via the DNS (DNS
              HTTPSSVC)", draft-nygren-httpbis-httpssvc-03 (work in
              progress), July 2019.

   [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.
              Rose, "DNS Security Introduction and Requirements",
              RFC 4033, DOI 10.17487/RFC4033, March 2005,
              <https://www.rfc-editor.org/info/rfc4033>.

   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,
              "Randomness Requirements for Security", BCP 106, RFC 4086,
              DOI 10.17487/RFC4086, June 2005,
              <https://www.rfc-editor.org/info/rfc4086>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

   [RFC8484]  Hoffman, P. and P. McManus, "DNS Queries over HTTPS
              (DoH)", RFC 8484, DOI 10.17487/RFC8484, October 2018,
              <https://www.rfc-editor.org/info/rfc8484>.

11.2.  Informative References

   [I-D.annee-dprive-oblivious-dns]
              Edmundson, A., Schmitt, P., Feamster, N., and A. Mankin,
              "Oblivious DNS - Strong Privacy for DNS Queries", draft-
              annee-dprive-oblivious-dns-00 (work in progress), July
              2018.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

Authors' Addresses









Kinnear, et al.          Expires March 12, 2020                [Page 11]

Internet-Draft               Obfuscated DoH               September 2019


   Eric Kinnear
   Apple Inc.
   One Apple Park Way
   Cupertino, California 95014
   United States of America

   Email: ekinnear@apple.com


   Tommy Pauly
   Apple Inc.
   One Apple Park Way
   Cupertino, California 95014
   United States of America

   Email: tpauly@apple.com


   Chris Wood
   Apple Inc.
   One Apple Park Way
   Cupertino, California 95014
   United States of America

   Email: cawood@apple.com


   Patrick McManus
   Fastly

   Email: mcmanus@ducksong.com




















Kinnear, et al.          Expires March 12, 2020                [Page 12]
